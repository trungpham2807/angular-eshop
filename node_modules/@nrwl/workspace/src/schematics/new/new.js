"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Preset = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const ast_utils_1 = require("../../utils/ast-utils");
const format_files_1 = require("../../utils/rules/format-files");
const versions_1 = require("../../utils/versions");
const path = require("path");
const rxjs_1 = require("rxjs");
const child_process_1 = require("child_process");
const package_manager_1 = require("@nrwl/tao/src/shared/package-manager");
const yargsParser = require("yargs-parser");
const devkit_1 = require("@nrwl/devkit");
var Preset;
(function (Preset) {
    Preset["Empty"] = "empty";
    Preset["OSS"] = "oss";
    Preset["WebComponents"] = "web-components";
    Preset["Angular"] = "angular";
    Preset["AngularWithNest"] = "angular-nest";
    Preset["React"] = "react";
    Preset["ReactWithExpress"] = "react-express";
    Preset["NextJs"] = "next";
    Preset["Nest"] = "nest";
})(Preset = exports.Preset || (exports.Preset = {}));
class RunPresetTask {
    toConfiguration() {
        return {
            name: 'RunPreset',
        };
    }
}
function createPresetTaskExecutor(opts) {
    const cliCommand = opts.cli === 'angular' ? 'ng' : 'nx';
    const parsedArgs = yargsParser(process.argv, {
        boolean: ['interactive'],
    });
    return {
        name: 'RunPreset',
        create: () => {
            return Promise.resolve(() => {
                const spawnOptions = {
                    stdio: [process.stdin, process.stdout, process.stderr],
                    shell: true,
                    cwd: path.join(opts.nxWorkspaceRoot || process.cwd(), opts.directory),
                };
                const pmc = package_manager_1.getPackageManagerCommand();
                const executable = `${pmc.exec} ${cliCommand}`;
                const args = [
                    `g`,
                    `@nrwl/workspace:preset`,
                    `--name=${opts.appName}`,
                    opts.style ? `--style=${opts.style}` : null,
                    opts.linter ? `--linter=${opts.linter}` : null,
                    opts.npmScope
                        ? `--npmScope=${opts.npmScope}`
                        : `--npmScope=${opts.name}`,
                    opts.preset ? `--preset=${opts.preset}` : null,
                    `--cli=${cliCommand}`,
                    parsedArgs.interactive ? '--interactive=true' : '--interactive=false',
                ].filter((e) => !!e);
                return new rxjs_1.Observable((obs) => {
                    child_process_1.spawn(executable, args, spawnOptions).on('close', (code) => {
                        if (code === 0) {
                            obs.next();
                            obs.complete();
                        }
                        else {
                            const message = 'Workspace creation failed, see above.';
                            obs.error(new Error(message));
                        }
                    });
                });
            });
        },
    };
}
function default_1(options) {
    if (options.skipInstall &&
        options.preset !== 'empty' &&
        options.preset !== 'oss') {
        throw new Error(`Cannot select a preset when skipInstall is set to true.`);
    }
    if (options.skipInstall && options.nxCloud) {
        throw new Error(`Cannot select nxCloud when skipInstall is set to true.`);
    }
    options = normalizeOptions(options);
    const layout = options.preset === 'oss' ? 'packages' : 'apps-and-libs';
    const workspaceOpts = Object.assign(Object.assign({}, options), { layout, preset: undefined, nxCloud: undefined });
    return (host, context) => {
        const engineHost = context.engine.workflow.engineHost;
        engineHost.registerTaskExecutor(createPresetTaskExecutor(options));
        return schematics_1.chain([
            schematics_1.schematic('workspace', workspaceOpts),
            options.cli === 'angular' ? setDefaultPackageManager(options) : schematics_1.noop(),
            setDefaultLinter(options),
            addPresetDependencies(options),
            addCloudDependencies(options),
            schematics_1.move('/', options.directory),
            addTasks(options),
            format_files_1.formatFiles({ skipFormat: false }, options.directory),
        ])(schematics_1.Tree.empty(), context);
    };
}
exports.default = default_1;
function addCloudDependencies(options) {
    return options.nxCloud
        ? ast_utils_1.addDepsToPackageJson({}, { '@nrwl/nx-cloud': 'latest' }, false)
        : schematics_1.noop();
}
function addPresetDependencies(options) {
    if (options.preset === 'empty') {
        return schematics_1.noop();
    }
    else if (options.preset === 'web-components') {
        return ast_utils_1.addDepsToPackageJson({}, {
            '@nrwl/web': versions_1.nxVersion,
        }, false);
    }
    else if (options.preset === 'angular') {
        return ast_utils_1.addDepsToPackageJson({
            '@nrwl/angular': versions_1.nxVersion,
        }, {}, false);
    }
    else if (options.preset === 'angular-nest') {
        return ast_utils_1.addDepsToPackageJson({
            '@nrwl/angular': versions_1.nxVersion,
        }, {
            '@nrwl/nest': versions_1.nxVersion,
        }, false);
    }
    else if (options.preset === 'react') {
        return ast_utils_1.addDepsToPackageJson({}, {
            '@nrwl/react': versions_1.nxVersion,
        }, false);
    }
    else if (options.preset === 'react-express') {
        return ast_utils_1.addDepsToPackageJson({}, {
            '@nrwl/react': versions_1.nxVersion,
            '@nrwl/express': versions_1.nxVersion,
        }, false);
    }
    else if (options.preset === 'next') {
        return ast_utils_1.addDepsToPackageJson({}, {
            '@nrwl/next': versions_1.nxVersion,
        }, false);
    }
    else if (options.preset === 'nest') {
        return ast_utils_1.addDepsToPackageJson({}, {
            '@nrwl/nest': versions_1.nxVersion,
        }, false);
    }
    else {
        return schematics_1.noop();
    }
}
function addTasks(options) {
    return (host, context) => {
        let packageTask;
        let presetInstallTask;
        if (!options.skipInstall) {
            packageTask = context.addTask(new tasks_1.NodePackageInstallTask(options.directory));
        }
        if (options.preset !== 'empty') {
            const createPresetTask = context.addTask(new RunPresetTask(), [
                packageTask,
            ]);
            presetInstallTask = context.addTask(new tasks_1.NodePackageInstallTask(options.directory), [createPresetTask]);
        }
        if (!options.skipGit) {
            const commit = typeof options.commit == 'object'
                ? options.commit
                : !!options.commit
                    ? {}
                    : false;
            context.addTask(new tasks_1.RepositoryInitializerTask(options.directory, commit), presetInstallTask
                ? [presetInstallTask]
                : packageTask
                    ? [packageTask]
                    : []);
        }
    };
}
function normalizeOptions(options) {
    options.name = devkit_1.names(options.name).fileName;
    if (!options.directory) {
        options.directory = options.name;
    }
    return options;
}
function setDefaultLinter({ linter, preset }) {
    // Don't do anything if someone doesn't pick angular
    if (preset === 'angular' || preset === 'angular-nest') {
        switch (linter) {
            case 'eslint': {
                return setESLintDefault();
            }
            case 'tslint': {
                return setTSLintDefault();
            }
            default: {
                return schematics_1.noop();
            }
        }
    }
    else {
        return schematics_1.noop();
    }
}
/**
 * This sets ESLint as the default for any schematics that default to TSLint
 */
function setESLintDefault() {
    return ast_utils_1.updateWorkspaceInTree((json) => {
        setDefault(json, '@nrwl/angular', 'application', 'linter', 'eslint');
        setDefault(json, '@nrwl/angular', 'library', 'linter', 'eslint');
        setDefault(json, '@nrwl/angular', 'storybook-configuration', 'linter', 'eslint');
        return json;
    });
}
/**
 * This sets TSLint as the default for any schematics that default to ESLint
 */
function setTSLintDefault() {
    return ast_utils_1.updateWorkspaceInTree((json) => {
        setDefault(json, '@nrwl/workspace', 'library', 'linter', 'tslint');
        setDefault(json, '@nrwl/cypress', 'cypress-project', 'linter', 'tslint');
        setDefault(json, '@nrwl/cypress', 'cypress-project', 'linter', 'tslint');
        setDefault(json, '@nrwl/node', 'application', 'linter', 'tslint');
        setDefault(json, '@nrwl/node', 'library', 'linter', 'tslint');
        setDefault(json, '@nrwl/nest', 'application', 'linter', 'tslint');
        setDefault(json, '@nrwl/nest', 'library', 'linter', 'tslint');
        setDefault(json, '@nrwl/express', 'application', 'linter', 'tslint');
        setDefault(json, '@nrwl/express', 'library', 'linter', 'tslint');
        return json;
    });
}
function setDefaultPackageManager({ packageManager }) {
    if (!packageManager) {
        return schematics_1.noop();
    }
    return ast_utils_1.updateWorkspaceInTree((json) => {
        if (!json.cli) {
            json.cli = {};
        }
        json.cli['packageManager'] = packageManager;
        return json;
    });
}
function setDefault(json, collectionName, generatorName, key, value) {
    if (!json.schematics)
        json.schematics = {};
    if (json.schematics[collectionName] &&
        json.schematics[collectionName][generatorName]) {
        json.schematics[collectionName][generatorName][key] = value;
    }
    else if (json.schematics[`${collectionName}:${generatorName}`]) {
        json.schematics[`${collectionName}:${generatorName}`][key] = value;
    }
    else {
        json.schematics[collectionName] = json.schematics[collectionName] || {};
        json.schematics[collectionName][generatorName] = { [key]: value };
    }
}
//# sourceMappingURL=new.js.map