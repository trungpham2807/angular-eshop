"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateJestConfig = void 0;
const workspace_1 = require("@nrwl/workspace");
const ts = require("typescript");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Updates the root jest config projects array and removes the project.
 *
 * @param schema The options provided to the schematic
 */
function updateJestConfig(schema) {
    return (tree, _context) => {
        return rxjs_1.from(workspace_1.getWorkspace(tree)).pipe(operators_1.map((_) => {
            const projectToRemove = schema.projectName;
            if (!tree.exists('jest.config.js')) {
                return tree;
            }
            const contents = tree.read('jest.config.js').toString();
            const sourceFile = ts.createSourceFile('jest.config.js', contents, ts.ScriptTarget.Latest);
            const changes = [];
            const sourceNodes = ast_utils_1.getSourceNodes(sourceFile);
            sourceNodes.forEach((node, index) => {
                if (ts.isToken(node) &&
                    ts.isStringLiteral(node) &&
                    node.text.includes(projectToRemove)) {
                    changes.push(new workspace_1.RemoveChange('jest.config.js', node.getStart(sourceFile), node.getFullText(sourceFile)));
                }
            });
            workspace_1.insert(tree, 'jest.config.js', changes);
            return tree;
        }));
    };
}
exports.updateJestConfig = updateJestConfig;
//# sourceMappingURL=update-jest-config.js.map