"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateStorybookConfig = void 0;
const workspace_1 = require("@nrwl/workspace");
const path = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const utils_1 = require("./utils");
const app_root_1 = require("@nrwl/workspace/src/utils/app-root");
/**
 * Updates relative path to root storybook config for `main.js` & `webpack.config.js`
 *
 * @param schema The options provided to the schematic
 */
function updateStorybookConfig(schema) {
    return (tree, _context) => {
        return rxjs_1.from(workspace_1.getWorkspace(tree)).pipe(operators_1.map((workspace) => {
            const project = workspace.projects.get(schema.projectName);
            const destination = utils_1.getDestination(schema, workspace, tree);
            const oldRelativeRoot = path
                .relative(path.join(app_root_1.appRootPath, `${project.root}/.storybook`), app_root_1.appRootPath)
                .split(path.sep)
                .join('/');
            const newRelativeRoot = path
                .relative(path.join(app_root_1.appRootPath, `${destination}/.storybook`), app_root_1.appRootPath)
                .split(path.sep)
                .join('/');
            const storybookDir = path.join(destination, '.storybook');
            if (!storybookDir) {
                return tree;
            }
            // Replace relative import path to root storybook folder for each file under project storybook
            tree.getDir(storybookDir).visit((file) => {
                const oldContent = tree.read(file).toString('utf-8');
                const newContent = oldContent.replace(oldRelativeRoot, newRelativeRoot);
                tree.overwrite(file, newContent);
            });
            return tree;
        }));
    };
}
exports.updateStorybookConfig = updateStorybookConfig;
//# sourceMappingURL=update-storybook-config.js.map