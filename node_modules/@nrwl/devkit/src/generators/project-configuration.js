"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readProjectConfiguration = exports.updateProjectConfiguration = exports.addProjectConfiguration = void 0;
const tslib_1 = require("tslib");
const workspace_1 = require("@nrwl/tao/src/shared/workspace");
const json_1 = require("../utils/json");
const get_workspace_layout_1 = require("../utils/get-workspace-layout");
/**
 * Adds project configuration to the Nx workspace.
 *
 * The project configuration is stored in workspace.json and nx.json. The utility will update
 * both files.
 *
 * @param host - the file system tree
 * @param projectName - unique name. Often directories are part of the name (e.g., mydir-mylib)
 * @param projectConfiguration - project configuration
 */
function addProjectConfiguration(host, projectName, projectConfiguration) {
    setProjectConfiguration(host, projectName, projectConfiguration, 'create');
}
exports.addProjectConfiguration = addProjectConfiguration;
/**
 * Updates the configuration of an existing project.
 *
 * The project configuration is stored in workspace.json and nx.json. The utility will update
 * both files.
 *
 * @param host - the file system tree
 * @param projectName - unique name. Often directories are part of the name (e.g., mydir-mylib)
 * @param projectConfiguration - project configuration
 */
function updateProjectConfiguration(host, projectName, projectConfiguration) {
    setProjectConfiguration(host, projectName, projectConfiguration, 'update');
}
exports.updateProjectConfiguration = updateProjectConfiguration;
/**
 * Reads a project configuration.
 *
 * The project configuration is stored in workspace.json and nx.json. The utility will read
 * both files.
 *
 * @param host - the file system tree
 * @param projectName - unique name. Often directories are part of the name (e.g., mydir-mylib)
 */
function readProjectConfiguration(host, projectName) {
    return Object.assign(Object.assign({}, readWorkspaceSection(host, projectName)), readNxJsonSection(host, projectName));
}
exports.readProjectConfiguration = readProjectConfiguration;
function readWorkspaceSection(host, projectName) {
    const path = get_workspace_layout_1.getWorkspacePath(host);
    const workspaceJson = json_1.readJson(host, path);
    const newFormat = workspace_1.toNewFormat(workspaceJson);
    if (!newFormat.projects[projectName]) {
        throw new Error(`Cannot find configuration for '${projectName}' in ${path}.`);
    }
    return newFormat.projects[projectName];
}
function readNxJsonSection(host, projectName) {
    const nxJson = json_1.readJson(host, 'nx.json');
    if (!nxJson.projects[projectName]) {
        throw new Error(`Cannot find configuration for '${projectName}' in nx.json`);
    }
    return nxJson.projects[projectName];
}
function setProjectConfiguration(host, projectName, projectConfiguration, mode) {
    const { tags, implicitDependencies } = projectConfiguration, workspaceConfiguration = tslib_1.__rest(projectConfiguration, ["tags", "implicitDependencies"]);
    addProjectToWorkspaceJson(host, projectName, workspaceConfiguration, mode);
    addProjectToNxJson(host, projectName, {
        tags,
        implicitDependencies,
    });
}
function addProjectToWorkspaceJson(host, projectName, project, mode) {
    const path = get_workspace_layout_1.getWorkspacePath(host);
    const workspaceJson = json_1.readJson(host, path);
    if (mode == 'create' && workspaceJson.projects[projectName]) {
        throw new Error(`Cannot create Project '${projectName}'. It already exists.`);
    }
    if (mode == 'update' && !workspaceJson.projects[projectName]) {
        throw new Error(`Cannot update Project '${projectName}'. It does not exist.`);
    }
    workspaceJson.projects[projectName] = project;
    host.write(path, JSON.stringify(workspaceJson));
}
function addProjectToNxJson(host, projectName, config) {
    const nxJson = json_1.readJson(host, 'nx.json');
    nxJson.projects[projectName] = Object.assign({
        tags: [],
    }, (config || {}));
    host.write('nx.json', JSON.stringify(nxJson));
}
//# sourceMappingURL=project-configuration.js.map