import '../compat/compat';
/**
 * Workspace configuration
 */
export interface WorkspaceConfiguration {
    /**
     * Projects' configurations
     */
    projects: {
        [projectName: string]: ProjectConfiguration;
    };
    /**
     * Default project. When project isn't provided, the default project
     * will be used. Convenient for small workspaces with one main application.
     */
    defaultProject?: string;
    /**
     * List of default values used by generators.
     *
     * These defaults are global. They are used when no other defaults are configured.
     *
     * Example:
     *
     * ```
     * {
     *   "@nrwl/react": {
     *     "library": {
     *       "style": "scss"
     *     }
     *   }
     * }
     * ```
     */
    generators?: {
        [collectionName: string]: {
            [generatorName: string]: any;
        };
    };
    /**
     * Default generator collection. It is used when no collection is provided.
     */
    cli?: {
        defaultCollection: string;
    };
}
/**
 * Project configuration
 */
export interface ProjectConfiguration {
    /**
     * Project's targets
     */
    targets: {
        [targetName: string]: TargetConfiguration;
    };
    /**
     * Project's location relative to the root of the workspace
     */
    root: string;
    /**
     * The location of project's sources relative to the root of the workspace
     */
    sourceRoot?: string;
    /**
     * Project type
     */
    projectType?: 'library' | 'application';
    /**
     * List of default values used by generators.
     *
     * These defaults are project specific.
     *
     * Example:
     *
     * ```
     * {
     *   "@nrwl/react": {
     *     "library": {
     *       "style": "scss"
     *     }
     *   }
     * }
     * ```
     */
    generators?: {
        [collectionName: string]: {
            [generatorName: string]: any;
        };
    };
}
/**
 * Target's configuration
 */
export interface TargetConfiguration {
    /**
     * The executor/builder used to implement the target.
     *
     * Example: '@nrwl/web:package'
     */
    executor: string;
    /**
     * Target's options. They are passed in to the executor.
     */
    options?: any;
    /**
     * Sets of options
     */
    configurations?: {
        [config: string]: any;
    };
    /**
     * List of the target's outputs. The outputs will be cached by the Nx computation
     * caching engine.
     */
    outputs?: string[];
}
export declare function workspaceConfigName(root: string): "workspace.json" | "angular.json";
/**
 * A callback function that is executed after changes are made to the file system
 */
export declare type GeneratorCallback = () => void | Promise<void>;
/**
 * A function that schedules updates to the filesystem to be done atomically
 */
export declare type Generator<T = unknown> = (tree: any, schema: T) => void | GeneratorCallback | Promise<void | GeneratorCallback>;
export declare class Workspaces {
    private root;
    constructor(root: string);
    relativeCwd(cwd: string): string;
    calculateDefaultProjectName(cwd: string, wc: WorkspaceConfiguration): string;
    readWorkspaceConfiguration(): WorkspaceConfiguration;
    isNxExecutor(nodeModule: string, executor: string): boolean;
    isNxGenerator(collectionName: string, generatorName: string): boolean;
    readExecutor(nodeModule: string, executor: string): {
        schema: any;
        implementation: any;
    };
    readGenerator(collectionName: string, generatorName: string): {
        normalizedGeneratorName: any;
        schema: any;
        implementation: Generator<unknown>;
    };
    private readExecutorsJson;
    private readGeneratorsJson;
    private resolvePaths;
}
export declare function reformattedWorkspaceJsonOrNull(w: any): any;
export declare function toNewFormat(w: any): any;
export declare function toNewFormatOrNull(w: any): any;
export declare function toOldFormatOrNull(w: any): any;
