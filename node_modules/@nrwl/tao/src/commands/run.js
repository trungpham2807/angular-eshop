"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.validateTargetAndConfiguration = exports.printRunHelp = void 0;
const tslib_1 = require("tslib");
const minimist = require("minimist");
const params_1 = require("../shared/params");
const print_help_1 = require("../shared/print-help");
const workspace_1 = require("../shared/workspace");
const chalk = require("chalk");
const logger_1 = require("../shared/logger");
function throwInvalidInvocation() {
    throw new Error(`Specify the project name and the target (e.g., nx run proj:build)`);
}
function parseRunOpts(cwd, args, defaultProjectName) {
    const runOptions = params_1.convertToCamelCase(minimist(args, {
        boolean: ['help', 'prod'],
        string: ['configuration', 'project'],
        alias: {
            c: 'configuration',
        },
    }));
    const help = runOptions.help;
    if (!runOptions._ || !runOptions._[0]) {
        throwInvalidInvocation();
    }
    // eslint-disable-next-line prefer-const
    let [project, target, configuration] = runOptions._[0].split(':');
    if (!project && defaultProjectName) {
        logger_1.logger.debug(`No project name specified. Using default project : ${chalk.bold(defaultProjectName)}`);
        project = defaultProjectName;
    }
    if (runOptions.configuration) {
        configuration = runOptions.configuration;
    }
    if (runOptions.prod) {
        configuration = 'production';
    }
    if (runOptions.project) {
        project = runOptions.project;
    }
    if (!project || !target) {
        throwInvalidInvocation();
    }
    const res = { project, target, configuration, help, runOptions };
    delete runOptions['help'];
    delete runOptions['_'];
    delete runOptions['c'];
    delete runOptions['configuration'];
    delete runOptions['prod'];
    delete runOptions['project'];
    return res;
}
function printRunHelp(opts, schema) {
    print_help_1.printHelp(`nx run ${opts.project}:${opts.target}`, schema);
}
exports.printRunHelp = printRunHelp;
function validateTargetAndConfiguration(workspace, opts) {
    const project = workspace.projects[opts.project];
    if (!project) {
        throw new Error(`Could not find project "${opts.project}"`);
    }
    const target = project.targets[opts.target];
    const availableTargets = Object.keys(project.targets);
    if (!target) {
        throw new Error(`Could not find target "${opts.target}" in the ${opts.project} project. Valid targets are: ${chalk.bold(availableTargets.join(', '))}`);
    }
    // Not all targets have configurations
    // and an undefined configuration is valid
    if (opts.configuration) {
        if (target.configurations) {
            const configuration = target.configurations[opts.configuration];
            if (!configuration) {
                throw new Error(`Could not find configuration "${opts.configuration}" in ${opts.project}:${opts.target}. Valid configurations are: ${Object.keys(target.configurations).join(', ')}`);
            }
        }
        else {
            throw new Error(`No configurations are defined for ${opts.project}:${opts.target}, so "${opts.configuration}" is invalid.`);
        }
    }
}
exports.validateTargetAndConfiguration = validateTargetAndConfiguration;
function run(cwd, root, args, isVerbose) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const ws = new workspace_1.Workspaces(root);
        return params_1.handleErrors(isVerbose, () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const workspace = ws.readWorkspaceConfiguration();
            const defaultProjectName = ws.calculateDefaultProjectName(cwd, workspace);
            const opts = parseRunOpts(cwd, args, defaultProjectName);
            validateTargetAndConfiguration(workspace, opts);
            const target = workspace.projects[opts.project].targets[opts.target];
            const [nodeModule, executor] = target.executor.split(':');
            const { schema, implementation } = ws.readExecutor(nodeModule, executor);
            const combinedOptions = params_1.combineOptionsForExecutor(opts.runOptions, opts.configuration, target, schema, defaultProjectName, ws.relativeCwd(cwd));
            if (opts.help) {
                printRunHelp(opts, schema);
                return 0;
            }
            if (ws.isNxExecutor(nodeModule, executor)) {
                return yield implementation(combinedOptions, {
                    root,
                    target,
                    workspace,
                    projectName: opts.project,
                });
            }
            else {
                return (yield Promise.resolve().then(() => require('./ngcli-adapter'))).run(root, Object.assign(Object.assign({}, opts), { runOptions: combinedOptions }), isVerbose);
            }
        }));
    });
}
exports.run = run;
//# sourceMappingURL=run.js.map